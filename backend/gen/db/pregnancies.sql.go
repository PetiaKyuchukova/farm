// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: pregnancies.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getPregnanciesByCowId = `-- name: GetPregnanciesByCowId :many
SELECT cowid, detectedat, firstday, lastday FROM pregnancies
where cowId =$1
`

func (q *Queries) GetPregnanciesByCowId(ctx context.Context, cowid string) ([]Pregnancy, error) {
	rows, err := q.query(ctx, q.getPregnanciesByCowIdStmt, getPregnanciesByCowId, cowid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pregnancy{}
	for rows.Next() {
		var i Pregnancy
		if err := rows.Scan(
			&i.Cowid,
			&i.Detectedat,
			&i.Firstday,
			&i.Lastday,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertPregnancy = `-- name: UpsertPregnancy :exec
INSERT INTO pregnancies(cowID,detectedAt,firstDay, lastDay) VALUES ($1, $2, $3, $4)
`

type UpsertPregnancyParams struct {
	Cowid      string       `json:"cowid"`
	Detectedat time.Time    `json:"detectedat"`
	Firstday   sql.NullTime `json:"firstday"`
	Lastday    sql.NullTime `json:"lastday"`
}

func (q *Queries) UpsertPregnancy(ctx context.Context, arg UpsertPregnancyParams) error {
	_, err := q.exec(ctx, q.upsertPregnancyStmt, upsertPregnancy,
		arg.Cowid,
		arg.Detectedat,
		arg.Firstday,
		arg.Lastday,
	)
	return err
}

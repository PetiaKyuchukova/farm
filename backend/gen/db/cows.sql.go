// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: cows.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const deleteCow = `-- name: DeleteCow :exec
DELETE FROM cows
where id =$1
`

func (q *Queries) DeleteCow(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteCowStmt, deleteCow, id)
	return err
}

const getAllCows = `-- name: GetAllCows :many
SELECT id, birthdate, gender, breed, colour, motherid, fatherid, fatherbreed, ispregnant, ovulation FROM cows
ORDER BY id ASC, birthdate ASC
`

func (q *Queries) GetAllCows(ctx context.Context) ([]Cow, error) {
	rows, err := q.query(ctx, q.getAllCowsStmt, getAllCows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cow{}
	for rows.Next() {
		var i Cow
		if err := rows.Scan(
			&i.ID,
			&i.Birthdate,
			&i.Gender,
			&i.Breed,
			&i.Colour,
			&i.Motherid,
			&i.Fatherid,
			&i.Fatherbreed,
			&i.Ispregnant,
			&i.Ovulation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCowById = `-- name: GetCowById :one
SELECT id, birthdate, gender, breed, colour, motherid, fatherid, fatherbreed, ispregnant, ovulation FROM cows
where id =$1
`

func (q *Queries) GetCowById(ctx context.Context, id string) (Cow, error) {
	row := q.queryRow(ctx, q.getCowByIdStmt, getCowById, id)
	var i Cow
	err := row.Scan(
		&i.ID,
		&i.Birthdate,
		&i.Gender,
		&i.Breed,
		&i.Colour,
		&i.Motherid,
		&i.Fatherid,
		&i.Fatherbreed,
		&i.Ispregnant,
		&i.Ovulation,
	)
	return i, err
}

const upsertCow = `-- name: UpsertCow :exec
INSERT INTO cows (id, birthdate,gender, breed,colour,motherId,fatherId,fatherBreed,isPregnant,ovulation) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
    ON CONFLICT(id)
    DO UPDATE SET
    id = $1,
    birthdate = $2,
    gender = $3,
    breed = $4,
    colour = $5,
    motherId = $6,
    fatherId = $7,
    fatherBreed = $8,
    isPregnant = $9,
    ovulation = $10
`

type UpsertCowParams struct {
	ID          string         `json:"id"`
	Birthdate   time.Time      `json:"birthdate"`
	Gender      sql.NullString `json:"gender"`
	Breed       sql.NullString `json:"breed"`
	Colour      sql.NullString `json:"colour"`
	Motherid    sql.NullString `json:"motherid"`
	Fatherid    sql.NullString `json:"fatherid"`
	Fatherbreed sql.NullString `json:"fatherbreed"`
	Ispregnant  sql.NullBool   `json:"ispregnant"`
	Ovulation   sql.NullTime   `json:"ovulation"`
}

func (q *Queries) UpsertCow(ctx context.Context, arg UpsertCowParams) error {
	_, err := q.exec(ctx, q.upsertCowStmt, upsertCow,
		arg.ID,
		arg.Birthdate,
		arg.Gender,
		arg.Breed,
		arg.Colour,
		arg.Motherid,
		arg.Fatherid,
		arg.Fatherbreed,
		arg.Ispregnant,
		arg.Ovulation,
	)
	return err
}
